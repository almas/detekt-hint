plugins {
    id "org.jetbrains.kotlin.jvm" version "1.9.20"
    id "io.gitlab.arturbosch.detekt" version "1.23.7"
    id "com.vanniktech.maven.publish" version "0.29.0"
    id "jacoco"
    id "org.jetbrains.dokka" version "1.9.20"
}

repositories {
    mavenCentral()
}

dependencies {
    // When creating a sample extension, change this dependency to the detekt-api version you build against
    // e.g. io.gitlab.arturbosch.detekt:detekt-api:1.x.x
    implementation "io.gitlab.arturbosch.detekt:detekt-api:1.23.7"
    // When creating a sample extension, change this dependency to the detekt-test version you build against
    // e.g. io.gitlab.arturbosch.detekt:detekt-test:1.x.x
    testImplementation "io.gitlab.arturbosch.detekt:detekt-test:1.23.7"
    // Do you want to write integration or system tests? Add the cli dependency.
    testImplementation "io.gitlab.arturbosch.detekt:detekt-cli:1.23.7"

    testImplementation "org.assertj:assertj-core:3.26.3"
    testImplementation "org.spekframework.spek2:spek-dsl-jvm:2.0.19"

    testRuntimeOnly "org.junit.platform:junit-platform-launcher:1.10.0"
    testRuntimeOnly "org.spekframework.spek2:spek-runner-junit5:2.0.19"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.9.20"
    detektPlugins "io.github.mkohm:detekt-hint:0.1.5"
    runtimeOnly "org.jetbrains.dokka:jekyll-plugin:1.9.20"
}
compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

java {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
}

detekt {
    config.setFrom("$projectDir/config/detekt.yml")
}

tasks.named("detekt").configure {
    reports {
        html.required.set(true)
        html.outputLocation.set(file("build/reports/detekt/detekt-hint.html"))

        xml.required.set(true)
        xml.outputLocation.set(file("build/reports/detekt/detekt-hint.xml"))

        txt.required.set(true)
        txt.outputLocation.set(file("build/reports/detekt/detekt-hint.txt"))
    }
}

test {
    useJUnitPlatform()
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = false
    }
}

tasks.dokkaJekyll {
    dokkaSourceSets {
        configureEach {
            outputDirectory.set(file("$projectDir/docs"))
            // other configurations
        }
    }
}
